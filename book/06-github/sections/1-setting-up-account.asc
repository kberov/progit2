=== Създаване на акаунт и конфигурация

(((GitHub, user accounts)))
Първото нещо, което трябва да направите, е да създадете безплатен акаунт.
За тази цел, посетете https://github.com[], изберете си user name,който не е все още зает,съпроводен с имейл адрес и парола, и кликнете големия зелен бутон ``Sign up for GitHub''.

.The GitHub sign-up form.
image::images/signup.png[The GitHub sign-up form.]

Следващото нещо, което ще видите е страницата с цени за ъпгрейднатите планове, но за сега може да ги игнорирате.
GitHub ще и прати имейл,за да потвърдите данните, които сте въвели.
НАправете го, доста е важно (както ще видим по-късно).

[NOTE]
====
GitHub ни позволява да позлва всичиките функционалности,с изключение на това, че всичките ни проекти са изцяло публични(всеки може да ги чете).
Платените планове в GitHub включват и лични проекти, но в тази книга няма да стигнем до там.
====
Кликвайки на Octocat логото в най-горния ляв ъгъл на екрана ще отидем на dashboard page-а.
Вече сте готовин да използвате ГитХъб.

==== SSH Access

(((SSH keys, with GitHub)))
В този момент сте напълно готови да свържете Git репо-тата си, ползвайки `https://` протокола, удостоверявайки се с username-а и паролата, която току-що добавихте.
However, to simply clone public projects, you don't even need to sign up - the account we just created comes into play when we fork projects and push to our forks a bit later.

If you'd like to use SSH remotes, you'll need to configure a public key.
(If you don't already have one, see <<_generate_ssh_key>>.)
Open up your account settings using the link at the top-right of the window:

.The ``Account settings'' link.
image::images/account-settings.png[The ``Account settings'' link.]

Then select the ``SSH keys'' section along the left-hand side.

.The ``SSH keys'' link.
image::images/ssh-keys.png[The ``SSH keys'' link.]

From there, click the "`Add an SSH key`" button, give your key a name, paste the contents of your `~/.ssh/id_rsa.pub` (or whatever you named it) public-key file into the text area, and click ``Add key''.

[NOTE]
====
Be sure to name your SSH key something you can remember.
You can name each of your keys (e.g. "My Laptop" or "Work Account") so that if you need to revoke a key later, you can easily tell which one you're looking for.
====

[[_personal_avatar]]
==== Your Avatar

Next, if you wish, you can replace the avatar that is generated for you with an image of your choosing.
First go to the ``Profile'' tab (above the SSH Keys tab) and click ``Upload new picture''.

.The ``Profile'' link.
image::images/your-profile.png[The ``Profile'' link.]

We'll choose a copy of the Git logo that is on our hard drive and then we get a chance to crop it.

.Crop your avatar
image::images/avatar-crop.png[Crop your uploaded avatar.]

Now anywhere you interact on the site, people will see your avatar next to your username.

If you happen to have uploaded an avatar to the popular Gravatar service (often used for Wordpress accounts), that avatar will be used by default and you don't need to do this step.

==== Your Email Addresses

The way that GitHub maps your Git commits to your user is by email address.
If you use multiple email addresses in your commits and you want GitHub to link them up properly, you need to add all the email addresses you have used to the Emails section of the admin section.

[[_add_email_addresses]]
.Add email addresses
image::images/email-settings.png[Add all your email addresses.]

In <<_add_email_addresses>> we can see some of the different states that are possible.
The top address is verified and set as the primary address, meaning that is where you'll get any notifications and receipts.
The second address is verified and so can be set as the primary if you wish to switch them.
The final address is unverified, meaning that you can't make it your primary address.
If GitHub sees any of these in commit messages in any repository on the site, it will be linked to your user now.

==== Two Factor Authentication

Finally, for extra security, you should definitely set up Two-factor Authentication or ``2FA''.
Two-factor Authentication is an authentication mechanism that is becoming more and more popular recently to mitigate the risk of your account being compromised if your password is stolen somehow.
Turning it on will make GitHub ask you for two different methods of authentication, so that if one of them is compromised, an attacker will not be able to access your account.

You can find the Two-factor Authentication setup under the Security tab of your Account settings.

.2FA in the Security Tab
image::images/2fa-1.png[2FA in the Security Tab]

If you click on the ``Set up two-factor authentication'' button, it will take you to a configuration page where you can choose to use a phone app to generate your secondary code (a ``time based one-time password''), or you can have GitHub send you a code via SMS each time you need to log in.

After you choose which method you prefer and follow the instructions for setting up 2FA, your account will then be a little more secure and you will have to provide a code in addition to your password whenever you log into GitHub.
