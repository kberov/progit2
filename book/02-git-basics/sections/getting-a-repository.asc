[[_getting_a_repo]]
=== Да си направим Гит хранилище

Можете да създадете Гит проект по два начина.
Първият е като вземете съществуващ проект или папка и ги внесете в Гит.
Вторият се състои в клониране на съществуващо Гит хранилище от сървър.

==== Създаване на Хранилище в Съществуваща Папка

Ако започвате да следите промените в съществуващ проект, трябва да отидете в папката на проекта. Ако никога не
сте правили това, ето как изглежда на различните операционни системи:

на Linux:
[source,console]
----
$ cd /home/потребител/хранилище
----
на Mac:
[source,console]
----
$ cd /Users/потребител/хранилище
----
на Windows:
[source,console]
----
$ cd /c/потребител/хранилище
----

и въведете:

[source,console]
----
$ git init
----

Тази команда създава нова папка с име `.git`, която съдържа всичките необходими за хранилището файлове –
скелетът на едно Гит хранилище. Сега все още нищо не се следи.  (Вижте <<_git_internals>>, за да разберете
какви точно файлове се създават в папката `.git`, която създадохте току-що.)(((git commands, init)))

Ако искате да започнете да управлявате версиите на съществуващите файлове, трябва да започнете да следите тези
файлове и да ги подадете първоначално. Това се постига с няколко команди `git add`, като укажете файловете,
които искате да следите и след това изпълните `git commit`.

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'първа версия на проекта'
----

Ще видим какво правят тези команди след малко.
Сега имате Гит хранилище, в което файловете се следят и са подадени за първи път.

[[_git_cloning]]
==== Клониране на Съществуващо Хранилище

Ако искате да вземете копие на съществуващо хранилище – да речем проект, към който искате да се присъедините –
ви трябва командата `git clone`. В случай че сте запознати с други СУВ като Subversion, ще ви направи
впечатление, че командата е  "clone" (клонирай), а не "checkout" (отпиши). Това е важна разлика – вместо
просто работно копие, Гит взима пълно копие на почти всички данни, с които сървърът разполага. По подразбиране
се взима всяка версия на всеки файл, когато изпълните `git clone`. Всъщност ако данните от диска на сървъра се
повредят, можете да ползвате почти всяко копие на всеки от клиентите, за да възстановите състоянието им до
момента на клонирането от съответния клиент. Може да загубите някои скриптове, настроени да се изпълняват при
определени събития (hooks) и други, но всички данни за версиите ще са запазени. Вижте <<_git_on_the_server>>
за повече подробности.

Хранилище се клонира с `git clone [url]`.(((git commands, clone)))
Например ако искате да клонирате Гит като библиотека (името ѝ е libgit2), можете да го направите така:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Това създава папка с име ``libgit2'', папка `.git` в нея, изтегля всички данни за хранилището и отписва
(checkout) работно копие на последната версия. Ако отидете в папката `libgit2`, там ще видите файловете от
проекта, готови за промяна. Ако пък искате да клонирате хранилището в папка с друго име, можете да укажете
името като допълнителен параметър:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Тази команда прави същото като предната, но целевата папка (в която се клонира) се нарича `mylibgit`.

Гит може да ползва няколко протокола за пренос на данни. Предните примери ползват `https://`, но някъде можете
да видите да се ползват също `git://` или `user@server:path/to/repo.git`, който ползва протокола SSH.
<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.


