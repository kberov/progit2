=== Запис на Промени в Хранилището

Имате си истинско хранилище и отписано работно копие на файловете в проекта. Всеки път, когато проектът ви е в
състояние, което бихте искали да запишете, след като сте направили някакви промени, трябва да подадете
текущото състояние на файловете в хранилището.

Запомнете, че всеки файл в работната папка може да бъде в състояние "следен" (tracked) или "неследен" (untracked).
Следени са файловете, които са били в последното подаване. Те могат да бъдат променени, непроменени или в
индекса за подаване. Неследените файлове са всички останали – всеки файл в работната папка, който не е бил в
предишното подаване и не е в индекса за подаване. Когато за първи път клонирате хранилище, всичките файлове ще
бъдат следени и непроменени, защото Гит току що ги е отписала, а вие не сте променяли никой от тях.

Ако промените някой файл след последното подаване, Гит започва да го вижда като променен. Добавяте променените
файлове в индекса и ги подавате, след това процесът се повтаря.

.Жизнен цикъл на състоянието на файловете.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[_checking_status]]
==== Проверка на Състоянието на Файловете

Командадта `git status` е главното средство за проверка състоянието на файловете.(((git commands, status)))
Ако изпълните тази команда непосредствено след клониране, ще видите нещо подобно на следното:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----
[NOTE]
======
Ако терминалът ви е локализиран, това съобщение ще бъде на български. В Unix-подобни системи това става
като зададете следната стойност на променливата `$LANG=bg_BG.UTF-8`. Това обикновено е така, ако сте настроили
графичната си среда на български. Ето как изглежда в моя терминал. (Бел. Прев.)

[source,console]
----
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
липсват каквито и да е промени, работното дърво е чисто
----
======

Това означава, че работната папка е чиста – с други думи, никой от следените файлове не е променян.  Освен
това, Гит не вижда никакви неследени файлове.  Иначе биха били показани. Също така командата казва, на кой
клон се намирате и, че той не се различава от клона със същото име на сървъра. В нашия случай този клон е
``master''. Това е клонът по подразбиране. Не го мислете засега.  В <<_git_branching>> ще разгледаме клоните и
указателите в подробности.

Да речем, че добавите нов файл към проекта – обикновен файл README.
Ако файлът не е съществувал преди, и изпълните `git status`, виждате неследения файл по следния начин:

[source,console]
----
$ echo 'My Project' > README
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Неследени файлове:
  (използвайте „git add ФАЙЛ…“, за да определите какво включвате в подаването)

    README

към индекса за подаване не са добавени промени (използвайте „git add“ и/или „git commit -a“)
----

Виждате, че новият файл е неследен. Намира се под заглавието ``Неследени файлове:'' в изхода от `git status`.
Неследен означава, че Гит вижда файл, който не присъства в предишното подаване. Гит няма да започне да го
добавя, докато вие не ѝ кажете изрично. Това е така, за да не започнете без да си искате да добавяте
създадени двоични или други файлове. Сега искате да започнете да добавяте файла README, така че нека започнем
да го следим.

[[_tracking_files]]
==== Следене на Нови Файлове

За да започнете следенето на нов файл, използвате командата `git add`.(((git commands, add)))
За да започнете следенето на файла README file, изпълнете:

[source,console]
----
$ git add README
----

Ако изпълните отново командата `git status`, ще видите, че файлът сега е следен и добавен в индекса за
подаване.

[source,console]
----
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

    нов файл:   README

----

Разбирате че е добавен, защото се намира  под заглавието ``Промени, които ще бъдат подадени:''. Ако подадете
сега, в историята ще се запише файлът в състоянието, в което е бил, когато сте изпълнили `git add`. Може би си
спомняте, че след като изпълнихте `git init`, изпълнихте `git add (ФАЙЛове). С това действие започнахте да
следите файловете в папката.(((git commands, init)))(((git commands, add)))
Командата `git add` приема път до файл или папка. Ако е папка, командата добавя всички файлове в нея в
дълбочина.

==== Добавяне на Променени Файлове

Да променим файл, който вече се следи.  Ако промените вече следен файл, на име `CONTRIBUTING.md`, и след това
изпълните `git status`, ще видите нещо подобно:

[source,console]
----
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

	нов файл:          README

Промени, които не са в индекса за подаване:
  (използвайте „git add ФАЙЛ…“, за да обновите съдържанието за подаване)
  (използвайте „git checkout -- ФАЙЛ…“, за да отхвърлите промените в работното дърво)
    modified:   CONTRIBUTING.md

----

Файлът `CONTRIBUTING.md` се появява под заглавието ``Промени, които не са в индекса за подаване:'', което
означава, че е променен вече следен файл, но все още не е добавен в индекса за подаване.
За да го добавите, изпълнявате командата `git add`.
`git add` е многоцелева команда – използва се за започване следенето на нови файлове, за добавяне на следени
файлове и за други неща като означаване на файлове като готови в случай на конфликт при сливане.
Добре е да мислите за нея като за средство за добавяне на съдържание към следващото подаване
отколкото като команда за добавяне на файлове към проекта.(((git commands, add)))
Да изпълним `git add` сега, за да добавим в индекса файла `CONTRIBUTING.md` и след това да изпълним
отново `git status`:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

	променен:          CONTRIBUTING.md
	нов файл:          README.md

----

И двата файла са в индекса и ще отидат в следващото подаване. Да си представим, че сега се сещате за
нещо, което искате да промените в `CONTRIBUTING.md`, преди да го подадете. Отново го отваряте и
правите промяната си. Да изпълним за всеки случай `git status` отново.

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

	променен:          CONTRIBUTING.md
	нов файл:          README.md

Промени, които не са в индекса за подаване:
  (използвайте „git add ФАЙЛ…“, за да обновите съдържанието за подаване)
  (използвайте „git checkout -- ФАЙЛ…“, за да отхвърлите промените в работното дърво)

	променен:          CONTRIBUTING.md

----

Мамка му?! Сега `CONTRIBUTING.md` е и в списъка за подаване, _и_ в списъка на недобавените. К'во става?
Оказва се, че Гит добавя файла _точно_ в състоянието, в което той се намира, когато изпълните `git add`. Ако
подадете сега версията на `CONTRIBUTING.md` в състоянието, в което се е намирал, когато за последно сте
изпълнили `git add`, така и ще отиде в подаването. Файлът няма да бъде записан в хранилището в текущото си
състояние, когато изпълните `git commit`. Ако промените файл след като сте изпълнили `git add`, ще трябва да
изпълните `git add` отново, за да добавите новото състояние в индекса.

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
На клон master
Вашият клон е актуализиран както «origin/master».
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

	променен:          CONTRIBUTING.md
	нов файл:          README
----

==== Съкратено Състояние

Изходът от `git status` е подробен и многословен. Гит има също настройка за съкратено показване на състоянието
и така можете да да го видите в по-съкратен вид. Ако изпълните `git status -s` или `git status --short`
виждате по-сбит изход:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

Новите, неследени файлове се показват с `??` до тях, ново добавените имат `A`, променените файлове `M` и т.н.
В изхода виждаме две еднобуквени колони отляво на имената на файловете – лявата показва състоянието на индекса
за добавяне, а дясната – състоянието на работното дърво. Така например файлът `README` е променен в работната
папка, но все още не е добавен, докато `lib/simplegit.rb` е променен и вече добавен. `Rakefile` е бил
променен, добавен и отново променен. В него има промени, които са вече добавени и такива, които не са.

[[_ignoring]]
==== Пренебрегване на Файлове

Често ще имате видове файлове, които не искате Гит да добавя автоматично и дори да не ги показва като
неследени. Това обикновено са автоматично създадени файлове, като файлове за отчети или такива, произведени от
системата за изграждане на проекта ви. В такива случаи можете да създадете файл със писък от образци, наречен
`.gitignore`.(((ignoring files))) Ето примерен `.gitignore` файл:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

Първият ред казва на Гит да пренебрегва файлове, завършващи на ``.o'' или ``.a''.Това са обектни и архивни
файлове – изход от компилирането на кода ви. Вторият ред казва на Гит да пренебрегва всички файлове, чието име
завършва с вълнообразна чертица (`~`). Те се използват от много текстови редактори като Emacs за съхранение на
временна информация. Може да включите също папки с имена log, tmp, или pid, автоматично създадена документация
и т.н. Хубаво е да имате `.gitignore` още преди да сте започнали проекта, за да не би случайно да подадете
файлове, които наистина не искате в хранилището.

Правилата за образците от заместващи знаци, които можете да поставите в `.gitignore` са следните:

*  Празните редове или такива, започващи с `#` се пропускат.
*  Стандартни образци (шаблони) от заместващи знаци.
*  Можете да започвате шаблони с наклонена черта (`/`), за да избегнете повторно съвпадение в дълбочина.
*  Можете да завършвате шаблони с наклонена черта (`/`), за да укажете папка.
*  Можете да създадете отрицаващ шаблон като го започнете с удивителен знак (`!`).

Образците от заместващи знаци са опростени изрази за намиране на съвпадения, използвани от различните обвивки
на операционните системи. Звездата (`*`) съвпада с един или повече знаци; `[abc]` съвпада с всеки знак в
квадратните скоби (в този случай a, b, или c); въпросителният знак (`?`) дава съвпадение с отделен знак; а
квадратните скоби, ограждащи знаци разделени със съединителна чертица (`[0-9]`) съвпадат с всеки между тях
включително (в този случай от 0 до 9). Можете също да ползвате две звездички, за да укажете няколко папки една
в друга; `a/**/z` ще съвпадне с `a/z`, `a/b/z`, `a/b/c/z` и т.н.

Ето друг примерен .gitignore файл:

[source]
----
# без файлове, завършващи на .a
*.a

# но да се следи lib.a, дори ако се пренебрегват всички, завършващи на .a файлове горе
!lib.a

# пренебрегваме файла TODO само в текущата папка, а не подпапка/TODO
/TODO

# да се пренебрегват всички файлове в папка build/
build/

# да се пренебрегват doc/notes.txt, но не и doc/server/arch.txt
doc/*.txt

# пренебрегване на всички .pdf файлове в папка doc/
doc/**/*.pdf
----

[TIP]
====
GitHub поддържа доста обстоен списък с добри примерни `.gitignore` файлове за десетки видове проекти и
езици. Адресът, на който ще ги намерите е https://github.com/github/gitignore[]. Ползвайте ги като отправна
точка в своите проекти.
====

[[_git_diff_staged]]
==== Разглеждане на Добавените и Недобавените Промени

Ако `git status` ви се струва недостатъчна –  искате да видите какво точно е променено, не само кои файлове са
променени – можете да ползвате командата `git diff`.(((git commands, diff))) Ще разгледаме подробно `git diff`
по-късно. Засега е достатъчно да знаете, че тази команда ви отговаря, в повечето случаи, на следните въпроси:
Какво сте променили и все още не сте добавили? И какво сте добавили в индекса за подаване. Макар `git status`
да отговаря на тези въпроси, като ви показва списък с файлове, `git diff` ви показва самите редове, които са
махнати или добавени – самата кръпка, такава кавато е.

Да кажем че промените и добавите файла `README`, а след това промените файла `CONTRIBUTING.md`, без да го
добавяте. Ако изпълните командата `git status`, ще видите следното:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

За да видите какво сте променили, но все още не сте добавили, изпълнете `git diff` без никакви допълнителни
аргументи:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

Тази команда сравнява промените в работното дърво с всичко, намиращо се в индекса за подаване.
Изходът ѝ показва промените, който все още не сте добавили.

Ако искате да видите промените, които вече сте добавили в индекса и ще бъдат подадени, използвайте `git diff
--staged`. Тази команда сравнява добавените промени с последното подаване.

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

Важно е да отбележим, че `git diff` сама по себе си не показва всички промени, направени след последното
подаване, а само тези, които все още не са добавени в индекса. Това може да ви обърка, защото ако сте добавили
всичките си промени `git diff` няма да изведе нищо на екрана.

Друг пример. Ако добавите `CONTRIBUTING.md` и след това го промените отново, можете да ползвате `git diff`, за
да видите добавените и недобавените промени. Ако средата ни изглежда по следния начин:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Сега с `git diff` можете да видите все още недобавените си промени:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

А с `git diff --cached` можете да видите вече добавените промени (`--staged` и `--cached` са синоними):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff във Външна Програма
====
We will continue to use the `git diff` command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run `git difftool --tool-help` to see what is available on your system.
====

[[_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files whose names end with a `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three – it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
