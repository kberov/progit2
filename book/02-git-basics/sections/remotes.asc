[[_remote_repos]]
=== Работа с отдалечени хранилища

За да работите с други хора по какъвто и да е проект в Гит, трябва да знаете как да управлявате отдалечените си
хранилища. Те са версии на на проекта, намиращи се някъде в мрежата. Може да имате няколко такива, всяко от
които е настроено само за четене или за писане и четене от вас. Да си сътрудничите с другите, означава да
управлявате тези хранилища, като изтегляте и изтласквате подавания, когато искате да споделяте свършена
работа. Сътрудничеството също изисква знания как да добавяте отдалечени хранилища и да ги премахвате, когато
вече са ненужни, да управлявате отдалечени клонове и да ги указвате като следени или не, и т.н. В този раздел
ще засегнем някои от тези умения.

==== Показване на отдалечените хранилища 

За да видите кои отдалечени сървъри сте настроили, изпълнете `git remote` command.(((git commands, remote)))
Тази команда показва списък с кратки имена за всяко хранилище. Ако сте клонирали текущото хранилище, би
трябвало да видите поне `origin` – това е името, което Гит дава по подразбиране на хранилището, от което сте
клонирали проекта:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Клониране и създаване на хранилище в „ticgit“…
remote: Counting objects: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0), pack-reused 1857
Получаване на обекти: 100% (1857/1857), 331.41 KiB | 184.00 KiB/s, действието завърши.
Откриване на съответните разлики: 100% (837/837), действието завърши.
$ cd ticgit
$ git remote
origin
----

Можете също да укажете `-v`. Така ще видите и адресите, съответстващи на краткото име и използвани за писане и
четене от хранилището:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Ако имате повече от едно хранилище, командата показва всичките. Например проект с няколко отдалечени хранилища
за работа с няколко сътрудници изглежда така.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Това означава, че можем да изтегляме подавания от всеки един от тези потребители. Може би имаме разрешения и
за изтласкване на наши подавания към тях, но изхода на командата не ни казва това.

Забележете, че тези хранилища използват различни протоколи. Ще научим повече за това в <<_git_on_the_server>>.

==== Добавяне на отдалечени хранилища

Вече споменахме и показахме как командата 'clone' мълчаливо добавя хранилището `origin`. Ето сега как да
добавим ново далечно хранилище изрично.(((git commands, remote))) За да добавите ново хранилище с кратко име,
което да използвате за улеснение, изпълнете `git remote add <краткоиме> <адрес>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Сега можете да използвате низа `pb` на командния ред вместо пълния адрес. Например, ако искате да донесете
всички промени от Павел, които все още нямате във вашето хранилище, можете да изпълните `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Главния клон 'master' на Павел сега е достъпен при нас като `pb/master` – можете да го влеете в някой от
вашите клони, или да го отпишете, за да го разгледате. (Ще разгледаме работата с клони по-подробно в <<_git_branching>>.)

[[_fetching_and_pulling]]
==== Донасяне и изтегляне от отдалечени хранилища

Току що видяхте, че за да вземете данни от отдалечено проекти, можете да изпълните:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Командата отива и изтегля всички данни от отдалечения проект, който все още нямате. След като направите това,
имате локален достъп до всички клони от това хранилище. Можете да ги слеете с ваши клони или да ги разглеждате
по всяко време.


Ако клонирате хранилище, командата автоматично присвоява на хранилището името ``origin''. Така `git fetch
origin` донася всичко ново, което е изтласкано към сървъра откакто сте клонирали (или сте донесли последния
път). Важно е да се отбележи, че `git fetch` само *донася/сваля* данните – тя не ги слива автоматично с вашата
работа, нито пък променя файловете, по които работите в момента. Трябва ръчно да ги слеете, когато сте готови.

Ако текущият ви клон е настроен да следи отдалечен клон (вижте следващия раздел и <<_git_branching>>) можете
да използвате `git pull`, за да донесете и автоматично да слеете отдалечения клон с текущия.(((git commands,
pull))) Това е може би по-лесен или удобен начин на работа за вас. Освен това, `git clone` настройва главния
ви клон да следи главния клон (както и да се нарича) на отдалеченото хранилище. Като изпълнявате командата
`git pull` тя донася данните и се опитва автоматично да слее новите промени с файловете, върху които работите.

[[_pushing_remotes]]
==== Изтласкване към отдалечени хранилища 

When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:

[source,console]
----
$ git push origin master
----

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to fetch their work first and incorporate it into yours before you'll be allowed to push.
See <<_git_branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== Inspecting a Remote

If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
It also lists all the remote references it has pulled down.

That is a simple example you're likely to encounter.
When you're using Git more heavily, however, you may see much more information from `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run `git pull`.

==== Removing and Renaming Remotes

You can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

It's worth mentioning that this changes all your remote-tracking branch names, too.
What used to be referenced at `pb/master` is now at `paul/master`.

If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can either use `git remote remove` or `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----
