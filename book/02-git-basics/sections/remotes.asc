[[_remote_repos]]
=== Работа с отдалечени хранилища

За да работите с други хора по какъвто и да е проект в Гит, трябва да знаете как да управлявате отдалечените си
хранилища. Те са версии на на проекта, намиращи се някъде в мрежата. Може да имате няколко такива, всяко от
които е настроено само за четене или за писане и четене от вас. Да си сътрудничите с другите, означава да
управлявате тези хранилища, като изтегляте и изтласквате подавания, когато искате да споделяте свършена
работа. Сътрудничеството също изисква знания как да добавяте отдалечени хранилища и да ги премахвате, когато
вече са ненужни, да управлявате отдалечени клонове и да ги указвате като следени или не, и т.н. В този раздел
ще засегнем някои от тези умения.

==== Показване на отдалечените хранилища 

За да видите кои отдалечени сървъри сте настроили, изпълнете `git remote`.(((git commands, remote)))
Тази команда показва списък с кратки имена за всяко хранилище. Ако сте клонирали текущото хранилище, би
трябвало да видите поне `origin` – това е името, което Гит дава по подразбиране на хранилището, от което сте
клонирали проекта:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Клониране и създаване на хранилище в „ticgit“…
remote: Counting objects: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0), pack-reused 1857
Получаване на обекти: 100% (1857/1857), 331.41 KiB | 184.00 KiB/s, действието завърши.
Откриване на съответните разлики: 100% (837/837), действието завърши.
$ cd ticgit
$ git remote
origin
----

Можете също да укажете `-v`. Така ще видите и адресите, съответстващи на краткото име и използвани за писане и
четене от хранилището:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Ако имате повече от едно хранилище, командата показва всичките. Например проект с няколко отдалечени хранилища
за работа с няколко сътрудници изглежда така.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Това означава, че можем да изтегляме подавания от всеки един от тези потребители. Може би имаме разрешения и
за изтласкване на наши подавания към тях, но изхода на командата не ни казва това.

Забележете, че тези хранилища използват различни протоколи. Ще научим повече за това в <<_git_on_the_server>>.

==== Добавяне на отдалечени хранилища

Вече споменахме и показахме как командата 'clone' мълчаливо добавя хранилището `origin`. Ето сега как да
добавим ново далечно хранилище изрично.(((git commands, remote))) За да добавите ново хранилище с кратко име,
което да използвате за улеснение, изпълнете `git remote add <краткоиме> <адрес>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Сега можете да използвате низа `pb` на командния ред вместо пълния адрес. Например, ако искате да доставите
всички промени от Павел, които все още нямате във вашето хранилище, можете да изпълните `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Главния клон 'master' на Павел сега е достъпен при нас като `pb/master` – можете да го влеете в някой от
вашите клони, или да го отпишете, за да го разгледате. (Ще разгледаме работата с клони по-подробно в <<_git_branching>>.)

[[_fetching_and_pulling]]
==== Доставяне и изтегляне от отдалечени хранилища

Току що видяхте, че за да вземете данни от отдалечено проекти, можете да изпълните:(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Командата отива и изтегля всички данни от отдалечения проект, който все още нямате. След като направите това,
имате локален достъп до всички клони от това хранилище. Можете да ги слеете с ваши клони или да ги разглеждате
по всяко време.


Ако клонирате хранилище, командата автоматично присвоява на хранилището името ``origin''. Така `git fetch
origin` доставя всичко ново, което е изтласкано към сървъра откакто сте клонирали (или сте доставили последния
път). Важно е да се отбележи, че `git fetch` само *доставя/сваля* данните – тя не ги слива автоматично с вашата
работа, нито пък променя файловете, по които работите в момента. Трябва ръчно да ги слеете, когато сте готови.

Ако текущият ви клон е настроен да следи отдалечен клон (вижте следващия раздел и <<_git_branching>>) можете
да използвате `git pull`, за да доставите и автоматично да слеете отдалечения клон с текущия.(((git commands,
pull))) Това е може би по-лесен или удобен начин на работа за вас. Освен това, `git clone` настройва главния
ви клон да следи главния клон (както и да се нарича) на отдалеченото хранилище. Като изпълнявате командата
`git pull` тя доставя данните и се опитва автоматично да слее новите промени с файловете, върху които работите.

[[_pushing_remotes]]
==== Изтласкване към отдалечени хранилища 

Когато проектът ви е в състояние, подходящо за споделяне, трябва да го изтласкате нагоре. Командата е проста:
`git push [remote-name] [branch-name]`.(((git commands, push))) Ако искате да изтласкате клона 'master' към
сървъра `origin` (при клонирането автоматично се създават тези имена), можете да изпълните следната команда, за
да закарате всички подавания, които сте направили обратно към сървъра:

[source,console]
----
$ git push origin master
----

Тази команда работи само когато сте клонирали от сървър, до който имате достъп за писане и никой не е
изтласкал междувременно. Ако вие и други клонирате хранилището и междувременно някой от тях изтласка натам,
вашето изтласкване ще бъде отхвърлено. Ще ви се наложи първо да доставите тяхната работа и да я слеете с
вашата, преди да ви бъде разрешено да изтласкате. Вижте <<_git_branching>> за подробности как се изтласква към
отдалечени сървъри.

[[_inspecting_remote]]
==== Разглеждане на отдалечено хранилище 

Ако искате да видите повече относно някое хранилище, може да използвате командата `git remote show
[remote-name]`.(((git commands, remote))) Ако изпълните командата с кратко име, получавате нещо подобно на
следното:

[source,console]
----
$ git remote show origin
● отдалечено хранилище „origin“
  Адрес за доставяне: https://github.com/schacon/ticgit
  Адрес за изтласкване: https://github.com/schacon/ticgit
  клон сочен от HEAD: master
  Отдалечени клони:
    master следен
    ticgit следен
  Локални клони настроени за издърпване чрез „git pull“:
    master сливане с отдалечения клон „master“
    ticgit сливане с отдалечения клон „ticgit“
  Локалните указатели, настроени за „git push“:
    master изтласква към master (актуален)
    ticgit изтласква към ticgit (актуален)
----

Показват се адреса на отдалеченото хранилище и ведомост за следените клони. Командата услужливо ви казва,
че ако се намирате на клона 'master' и изпълните `git pull`, тя ще достави всички отдалечени указатели и влее в
клона 'master' отдалеченото му съответствие. Също така показва списък с всички доставени отдалечени указатели.

Това е прост пример, с които е възможно да се сблъскате. Когато използвате Гит повече обаче, най-вероятно
изходът от `git remote show` ще е доста по-обемен:  

[source,console]
----
$ git remote show origin
● отдалечено хранилище „origin“
  Адрес за доставяне: git@github.com:kberov/perl6intro.git
  Адрес за изтласкване: git@github.com:kberov/perl6intro.git
  клон сочен от HEAD: master
  Отдалечени клони:
    Modules         следен
    Parallel        следен
    RegEx           следен
    Unicode         следен
    master          следен
    updates-2017-01 следен
  Локални клони настроени за издърпване чрез „git pull“:
    master          сливане с отдалечения клон „master“
    updates-2017-01 сливане с отдалечения клон „updates-2017-01“
  Локалните указатели, настроени за „git push“:
    master          изтласква към master          (може да се превърти)
    updates-2017-01 изтласква към updates-2017-01 (актуален)
----

Тази команда показва кой клон ще бъде автоматично изтласкан ако изпълните `git push` докато сте на съответния
клон. Също така показва кои отдалечени клони нямате все още, кои клони са на компютъра ви, но вече са премахнати
на сървъра и клони, които можете да слеете автоматично със следените съответни отдалечени клони, когато
изпълните `git pull`.

==== Премахване и преименуване на отдалечени хранилища

Можете да изпълните `git remote rename`, за да промените краткото име на отдалечено хранилище.(((git commands,
remote))) Например ако искате да преименувате `pb` на `paul`, можете да го направите чрез `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Трябва да отбележим, че това променя и имената на отдалечените клони. Това, което е указвано до сега с
`pb/master` сега е `paul/master`.

Ако по някаква причина искате да премахнете някое отдалечено хранилище – преместили сте сървъра или повече не
използвате дадено огледало, или пък някои сътрудник се е оттеглил – можете да използвате `git remote remove`
или `git remote rm`.

[source,console]
----
$ git remote remove paul
$ git remote
origin
----
