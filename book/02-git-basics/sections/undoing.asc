[[_undoing]]
=== Отмяна на действия

По всяко време може да ви се прииска да отмените (undo) направена промяна. Тук ще разгледаме някои основни
средства за отмяна на направени промени. Бъдете внимателни, защото не винаги ще можете да отменѝте отмѐните.
Това е един от малкото случаи, в които можете да загубите част от свършената работа, ако подходите грешно.

Едно от действията, които често бихте искали да отмените е, когато подадете файлове твърде рано и се сетите, че
сте забравили да добавите някой файл към подаването. Друг случай е когато искате да промените съобщението в
подаването. Ако искате да направите подаването отново, можете да изпълните командата commit с опцията
`--amend`:

[source,console]
----
$ git commit --amend
----

Тази команда използва индекса за подаване. Ако не сте променяли нищо след последното подаване, то моментната
снимка на проекта ви ще изглежда по същия начин и единственото, което ще промените, е съобщението.

Появява се същия редактор за промяна на съобщението, но вече съдържащ съобщението от последното подаване.
Можете да промените съобщението. Това ще презапише предишното подаване.

Например ако подадете и се усетите, че сте забравили да добавите някои промени, можете да направите следното:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Сега имате само едно подаване – второто подаване замества първото изцяло.

[[_unstaging]]
==== Премахване на файл от индекса за подаване

The next two sections demonstrate how to work with your staging area and working directory changes.
The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
How can you unstage one of the two?
The `git status` command reminds you:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Right below the ``Changes to be committed'' text, it says use `git reset HEAD <file>...` to unstage.
So, let's use that advice to unstage the `CONTRIBUTING.md` file:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

The command is a bit strange, but it works.
The `CONTRIBUTING.md` file is modified but once again unstaged.

[NOTE]
=====
It's true that `git reset` can be a dangerous command, especially if you provide the `--hard` flag.
However, in the scenario described above, the file in your working directory is not touched, so it's relatively safe.
=====

For now this magic invocation is all you need to know about the `git reset` command.
We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<_git_reset>>.

==== Unmodifying a Modified File

What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Luckily, `git status` tells you how to do that, too.
In the last example output, the unstaged area looks like this:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

It tells you pretty explicitly how to discard the changes you've made.
Let's do what it says:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

You can see that the changes have been reverted.

[IMPORTANT]
=====
It's important to understand that `git checkout -- <file>` is a dangerous command.
Any changes you made to that file are gone – Git just copied another file over it.
Don't ever use this command unless you absolutely know that you don't want the file.
=====

If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<_git_branching>>; these are generally better ways to go.

Remember, anything that is _committed_ in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<_data_recovery>> for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
