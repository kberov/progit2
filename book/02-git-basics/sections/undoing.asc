[[_undoing]]
=== Отмяна на действия

По всяко време може да ви се прииска да отмените (undo) направена промяна. Тук ще разгледаме някои основни
средства за отмяна на направени промени. Бъдете внимателни, защото не винаги ще можете да отменѝте отмѐните.
Това е един от малкото случаи, в които можете да загубите част от свършената работа, ако подходите грешно.

Едно от действията, които често бихте искали да отмените е, когато подадете файлове твърде рано и се сетите, че
сте забравили да добавите някой файл към подаването. Друг случай е когато искате да промените съобщението в
подаването. Ако искате да направите подаването отново, можете да изпълните командата commit с опцията
`--amend`:

[source,console]
----
$ git commit --amend
----

Тази команда използва индекса за подаване. Ако не сте променяли нищо след последното подаване, то моментната
снимка на проекта ви ще изглежда по същия начин и единственото, което ще промените, е съобщението.

Появява се същия редактор за промяна на съобщението, но вече съдържащ съобщението от последното подаване.
Можете да промените съобщението. Това ще презапише предишното подаване.

Например ако подадете и се усетите, че сте забравили да добавите някои промени, можете да направите следното:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Сега имате само едно подаване – второто подаване замества първото изцяло.

[[_unstaging]]
==== Премахване на файл от индекса за подаване

Следващите две секции показват как да работите с индекса за подаване и промените в работната папка. Хубавото
е, че командата, която използвате за определяне на състоянието на тези две области, също така ви подсказва как
да отмените промените в тях. Да речем, че сте променили два файла и искате да ги подадете поотделно, но по
погрешка написвате `git add *` и добавяте и двата. Как да извадите единия от индекса? Командата `git status`
ви напомня.

[source,console]
----
$ git add *
$ git status
На клон master
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Точно под текста ``Промени, които ще бъдат подадени'' се казва text, it says use
`(използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)`.
И така, да последваме съвета и да извадим `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Промени извън индекса след зануляването:
M	CONTRIBUTING.md
$ git status
На клон master
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

    renamed:    README.md -> README

Промени, които не са в индекса за подаване:
  (използвайте „git add ФАЙЛ…“, за да обновите съдържанието за подаване)
  (използвайте „git checkout -- ФАЙЛ…“, за да отхвърлите промените в работното дърво)

    modified:   CONTRIBUTING.md
----

Командата е малко странна, но работи.
Файлът `CONTRIBUTING.md` остава променен но вече не е добавен за подаване.

[NOTE]
=====
Командата `git reset` може да бъде опасна, но само ако добавите опцията `--hard`.
В нашия случай файлът остава недокоснат от Гит. Просто внимавайте какви опции подавате.
=====

Засега това заклинание с `git reset` ви стига. Ще засегнем подробно командата `reset` <<_git_reset>>. Там ще
се научите на интересни хитрини с нея.

==== Отмяна на промени в променени файлове

Какво ще направите, ако не искате да запазите промените в `CONTRIBUTING.md`? Как ще го върнете лесно в
първоначалното му състояние? За щастие `git status` отново ви казва как.

[source,console]
----
Промени, които не са в индекса за подаване:
  (използвайте „git add ФАЙЛ…“, за да обновите съдържанието за подаване)
  (използвайте „git checkout -- ФАЙЛ…“, за да отхвърлите промените в работното дърво)

    modified:   CONTRIBUTING.md
----

Обяснено е изрично как да премахнете направените промени.
Да направим както казва:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
На клон master
Промени, които ще бъдат подадени:
  (използвайте „git reset HEAD ФАЙЛ…“, за да извадите ФАЙЛа от индекса)

    renamed:    README.md -> README

----

Виждате, че промените ги няма.

[IMPORTANT]
=====
Важно е да се разбере, че `git checkout -- <file>` е опасна команда. Всички промени, направени в този файл
изчезват – Гит просто копира друг файл върху него. Не използвайте тази команда освен ако със сигурност знаете,
че не искате файла.
=====

Ако искате да запазите промените, но да разкарате файла засега, ще обясним скатаването и създаването на клони
в <<_git_branching>>. Те са по-добри начин за целта.

Запомнете, всичко _подадено_ в Гит, почти винаги може да бъде възстановено. Дори подавания, които са били в
клони, които вече са изтрити или такива, които са променени с помощта на `--amend`, може да се възстановят
(вижте <<_data_recovery>>, за да узнаете как да възстановявате данни). Но всичко, което загубите, без да сте
подали, няма как да възстановите.

