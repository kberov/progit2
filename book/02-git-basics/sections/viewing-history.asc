[[_viewing_history]]
=== Преглед на историята

След като сте подали промени няколко пъти или сте клонирали хранилище със съществуваща история, вероятно ще
искате да видите предишните промени. Най-простият и мощен начин е да ползвате командата `git log`.

Следните примери ползват простичък проект ``simplegit''. За да вземете проекта, изпълнете

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Като изпълните `git log` в този проект, ще видите изход, подобен на следния:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Ако не подадете никакви аргументи `git log` показва по подразбиране списък с подаванията в обратен ред,
последните подавания са най-отгоре. Както се вижда, тази команда извежда на екрана списък с подаванията с
техните SHA-1-суми, името на автора, електронната му поща, датата и съобщението.

`git log` предоставя множество възможности за показване на точно каквото искате да видите. Тук ще ви покажем
някои от най-използваните аргументи.

Един от най-полезните аргументи е `-p`. Той показва промените, направени при всяко подаване. Можете да
подадете допълнително `-2`, за да ограничите изхода до последните две подавания:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Този аргумент показва същата информация, но с промените, направени при всяко подаване. Това е много полезно
при преглед на кода или бързо разглеждане на поредица от подавания на някой сътрудник. Можете също да подадете
обобщаващи аргументи на `git log`. Например, за да видите съкратена статистика за всяко подаване, използвайте
`--stat`.

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Както виждате, аргументът `--stat` след всяко подаване извежда списък с променените файлове и колко реда са
добавени или премахнати във всеки файл. Също така накрая се показва обобщение на промените.

Друга наистина полезна възможност е `--pretty`. Този аргумент променя изхода на отчета по различен начин от
подразбиращия се. Можете да използвате няколко различни стойности за `--pretty`. `oneline` извежда всяко
подаване на един ред само. Това е полезно ако разглеждате голям брой подавания. Също така `short`, `full`, и
`fuller` показват изхода по подобен начин но с по-малко или повече информация съответно:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Най-интересната стойност е `format`. Тя ви позволява да укажете ваш собствен изглед на отчета. Това е особено
полезно когато създавате изход за автоматичен разбор. Тъй като вие сте задали изгледа изрично, знаете, че той
няма да се промени при обновяване на Гит:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> изрежда някои от най-полезните стойности, които приема `format`.

[[pretty_format]]
.Полезни стойности за `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Стойност | Описание на Изхода
| `%H`     | Пълна SHA-1 сума на подаването
| `%h`     | Съкратена SHA-1 сума на подаването
| `%T`     | SHA-1 сума на дървото
| `%t`     | Съкратена SHA-1 сума на дървото
| `%P`     | Родителски SHA-1 суми
| `%p`     | Съкратени родителски SHA-1 суми
| `%an`    | Име на автора
| `%ae`    | Е-поща на автора
| `%ad`    | Дата на автора (изходът е съобразен с --date=стойност)
| `%ar`    | Дата на автора, относителна
| `%cn`    | Име на подаващия
| `%ce`    | Е-поща на подаващия
| `%cd`    | Дата на подаващия
| `%cr`    | Дата на подаващия, относителна
| `%s`     | Предмет (съобщение) на подаването
|================================

Може би се питате каква е разликата между _автор_ и _подаващ_. Авторът е този, който първоначално е създал
съдържанието, докато подаващ е този, който прилага промените. Така ако изпратите кръпка до някой проект и
някой от участниците в проекта приложи вашата кръпка, всеки бива уважен – вие като автор и основния член на
отбора като подаващ. Ще обърнем повече внимание на тази разлика в <<_distributed_git>>.

Аргументите `oneline` and `format` са особено полезни с друг един аргумент на командата `log`. Това е
`--graph`. Този аргумент показва приятна ASCII графика с информация за историята на разклоняването и
сливането:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Този изглед ще стане по-интересен, когато преминем към разклоняването и сливането в следващата глава.

Засегнахме само някои прости възможности за нагласяване изгледа на `git log` – има много повече.
<<log_options>> изрежда възможностите, които засегнахме дотук, както и някои други общоизвестни и полезни
възможности заедно с това как те променят изхода от командата `log`.

[[log_options]]
.Често използвани възможности на `git log`
[cols="1,4",options="header"]
|================================
| Възможност        | Описание
| `-p`              | Показва кръпките, добавени с подаванията.
| `--stat`          | Показва статистика за променените файлове във всяко подаване.
| `--shortstat`     | Показва само променените/добавени/изтрити редове от командата --stat.
| `--name-only`     | Показва списък с променените файлове след съобщението за подаване.
| `--name-status`   | Показва списък с променените файлове и техните състояния –
добавен/променен/изтрит.
| `--abbrev-commit` | Показва само първите няколко знака от SHA-1 чексумата вместо всичките 40.
| `--relative-date` | Показва датата в относителен формат (например, ``преди 2 седмици'') вместо
пълния формат за дата.
| `--graph`         | Показва ASCII графика на сливанията и клоновете отстрани на изхода от отчета
за подаванията.
| `--pretty`        | Показва подаванията форматирани по различен начин. Възможностите са oneline,
short, full, fuller, и format (в този случай указвате ваш формат).
|================================

==== Ограничаване изхода от отчета

In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)

Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.
For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -Sfunction_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
