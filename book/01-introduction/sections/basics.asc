=== Основи на Гит

Е, какво е Гит всъщност? Това е важно да се разбере, защото, ако знаете какво е Гит и как работи в общи линии,
то може би ще ви бъде по-лесно да я ползвате ефективно. Като изучавате Гит, се опитайте да изчистите съзнанието
си от нещата, които знаете за други СУВ (като Subversion и Perforce). Така ще избегнете излишни обърквания,
докато ползвате системата. Гит съхранява и възприема данните по различен начин, макар потребителският интерфейс
да е подобен. Разбирането на разликите ще ви спести неудобства, докато ползвате
системата.(((Subversion)))(((Perforce)))

==== Снимки, не разлики

Главната разлика между Гит и всяка друга СУВ (Subversion и приятели включително) е начининът, по който Гит
възприема данните си. Повечето други системи съхраняват данните си като списък от промени върху файлове. Тези
системи (CVS, Subversion, Perforce, Bazaar и т.н.) възприемат данните, които съхраняват, като набор от файлове и
промени, направени върху всеки от тези файлове в течение на времето.

.Съхраняване на данни като промени върху една първична версия на всеки файл.
image::images/deltas.png[Съхраняване на данни като промени върху една първична версия на всеки файл.]

Гит нито възприема данните си, нито ги съхранява по този начин. Вместо това Гит гледа на данните като на набор
от състояния на малка файлова система. Всеки път, когато подадете файлове или запишете състоянието на
вашия проект в Гит, тя всъщност прави снимка на вашите файлове в момента и съхранява указател към това
състояние. Ако няма променени файлове, Гит не записва файла отново, а съхранява само връзка към предишното
състояние на същия файл, който вече е съхранила. Това се прави с цел ефективност. Гит разглежда данните си
като поток от *моментни снимки (състояния)*.

.Съхраняване на данните като снимки на проекта във времето.
image::images/snapshots.png[Съхраняване на данните като снимки на проекта във времето.]

Това е важна разлика между Гит и почти всички други СУВ. Гит преразглежда почти всяко положение от
управлението на версиите, докато повечето системи копират от предното поколение. Това превръща Гит по-скоро в
мини-файлова система с набор от изключително мощни инструменти, нежели обичайна СУВ. Ще разгледаме някои от
предимствата на това да се възприемат данните по този начин, когато обсъждаме разклоняването в
<<_git_branching>>.

==== Почти всяко действие е самостоятелно

Повечето действия в Гит се нуждаят само от файлове и ресурси на вашия компютър – като цяло няма нужда от
каквато и да е информация извън него. Ако сте свикнали със СУВ, където почти всяко действие зависи от мрежата,
тази страна на Гит ще ви накара да си мислите, че боговете на скоростта са я благословили с неописуема мощ.
Повечето действия се изпълняват мигновено, защото цялата история на проекта е на вашия твърд диск.

Например, ако разглеждате историята на проекта, Гит не трябва да прави заявка към сървър, за да вземе историята
и да ви я покаже. Тя просто я чете от собствената си база данни. Като следствие виждате историята почти
мигновено. Ако искате да видите направените промени в даден файл отпреди месец, Гит поглежда състоянието на
файла отпреди месец и изчислява разликите, вместо да прави заявка към отдалечен сървър за това или да взема
стара версия на файла от сървъра, за да го сравни с текущата версия на вашия компютър. 

Това означава също, че можете да правите почти всичко, дори ако сте извън линия или извън вашата виртуална
частна мрежа (ВЧМ). Ако сте в самолет или влак, можете да подавате промени спокойно и да качите промените,
когато се доберете до мрежа. Ако сте вкъщи и не успеете да настроите ВЧМ, все пак можете да работите. При
много други системи това е или невъзможно, или мъчително. С Perforce например не можете да направите много, ако
не сте свързани със сървъра, а със Subversion и CVS можете да променяте файлове, но не можете да подадете
промените в базата данни (защото сте извън линия). Това може и да ви изглежда, че не е кой знае какъв проблем,
но ще се изненадате като усетите разликата.

==== Гит е цялостно решение

Преди да се съхрани каквото и да е в Гит, то получава хеш-сума (указател) и след това указателят се ползва за
достъп до съхраненото. Това означава, че е невъзможно да промените съдържанието на файл или папка, без Гит да
знае за това. Тази способност е вградена в Гит на най-ниско ниво и е неразделна част от философията на
системата. Невъзможно е да загубите данни или да повредите файл, без Гит да засече това.

Механизмът, който Гит ползва за тези проверки, се нарича SHA-1 хеш.(((SHA-1))) Това е низ, съставен от
шестнадесетични знаци (от 0 до 9 и от a до f) с дължина 40 знака, и се изчислява върху съдържанието на файл
или папка. Един SHA-1 хеш изглежда така:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Ще виждате тези хеш-суми навсякъде в Гит, защото ситемата ги ползва изключително много.
Всъщност, Гит съхранява всичко в базата си данни не като име на файл, а като хеш-сума на съдържанието на файла.

==== Гит само добавя данни

Когато изпълнявате някакво действие, Гит почти винаги само добавя данни към базата. Трудно ще се сблъскате с
нещо, което не може да се отмени, или да накарате системата да изтрие данни по някакъв начин. Както при всички
други СУВ, лесно се губят данни, които не сте подали (committed) все още, но след като подадете промените си,
няма как да ги загубите, особено ако редовно ги изтласквате (push) към друго (отдалечено) хранилище.

Така ползването на Гит е просто радост за душата, защото знаем, че можем да експериментираме и няма как
сериозно да оплескаме нещата. По-задълбочен поглед върху това, как Гит съхранява данните и как да възстановите
данни, които изглеждат загубени, ще намерите в <<_undoing>>.

==== Трите състояния

А сега, внимавайте. Ако искате обучението ви да върви леко и нататък, най-важно е да запомните следното. В Гит
вашите файлове са винаги в едно от следните три състояния: подаден (committed), променен (modified) и в
индекса за подаване (staged).

"подаден" означава, че файлът е съхранен в базата данни на компютъра ви.

"променен" означава, че файлът е променен, но промяната все още не е в базата данни.

"в индекса за подаване" – добавили сте файла в индекса за подаване, след като сте го променили, и той ще отиде
в базата със следващото подаване.

Тук стигаме до трите главни съставни части на всеки Гит проект: папката `.git`, работното дърво и индексът за
подаване.

.Работно дърво, индекс за подаване и папка на Гит.
image::images/areas.png["Работно дърво, индекс за подаване и папка на Гит."]

В папката `.git` Гит съхранява метаданните и обектната база данни на проекта ви. Това е най-важната част
от Гит. Всъщност, само това се копира, когато клонирате едно хранилище от друг компютър. 

Работното дърво е отделно отписване на една версия от проекта. Тези файлове са извадени от компресираната база
данни в папката на Гит и са поставени на диска, за да бъдат ползвани и променяни от вас.

Индексът за подаване (staging area) е файл, намиращ се в директорията `.git`, който съдържа информация за това,
какво ще влезе в следващото подаване. Понякога се нарича просто индекс. footnote:[На английски понятията са "staging
area" и "index". (бел. прев.)].

Основният работен процес в Гит се състои от следните стъпки:

1. Променяте файлове в работното дърво.
2. Добавяте файлове към индекса за подаване – както ще изглеждат към момента на подаването.
3. Подавате ги (commit). Файловете се подават така, както са изглеждали, когато сте ги добавили към индекса, и се
записват за постоянно в Гит директорията ви.

Ако дадена версия на файл се намира в Гит папката, файлът се смята за подаден. Ако файлът е бил променен и
добавен, той се смята за "добавен към индекса". И ако е бил променен, след като е бил отписан (checked out), но
не е добавян, файлът се счита за променен. В главата <<_git_basics_chapter>> ще научите повече за тези
състояния, как да се възползвате от тях и как да пропуснете добавянето изцяло.
